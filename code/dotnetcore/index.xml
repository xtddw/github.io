<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Byone</title>
    <link>https://xtddw.github.io/code/dotnetcore/</link>
    <description>Recent content in dotnet on Byone</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>xtddw7@gmail.com (byone)</managingEditor>
    <webMaster>xtddw7@gmail.com (byone)</webMaster>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 30 Jan 2020 12:50:46 +0900</lastBuildDate>
    
        <atom:link href="https://xtddw.github.io/code/dotnetcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>01_项目创建及基础配置</title>
        <link>https://xtddw.github.io/code/dotnetcore/01%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/01%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</guid>
        <description>项目创建 ASP .NET Core Web Application 设置为Blog.Api 选择Empty+No Authentication 添加.NET Core类库，Blog.Core + Blog.Infrastructure Infrastructure 依赖 Core Api 依赖 Infrastructure + Core Program + Startup Pr</description>
      </item>
      
      <item>
        <title>02_集成EFCore</title>
        <link>https://xtddw.github.io/code/dotnetcore/02%E9%9B%86%E6%88%90efcore/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/02%E9%9B%86%E6%88%90efcore/</guid>
        <description>建立和注册Context 安装包 &amp;raquo;&amp;gt; Infrastructure项目 Microsoft.EntityFrameworkCore.Design Microsoft.EntityFrameworkCore.[Sqlite][SqlServer][MySql] dotnet add package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.SqlServer 建立Context Entities &amp;raquo;&amp;gt; Core项目 1 2 3 4 5 6 7 8 public class Post : Entity</description>
      </item>
      
      <item>
        <title>03_日志</title>
        <link>https://xtddw.github.io/code/dotnetcore/03%E6%97%A5%E5%BF%97logger/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/03%E6%97%A5%E5%BF%97logger/</guid>
        <description>Log 默认自带log &amp;raquo;&amp;gt;Program 1 WebHost.CreateDefaultBuilder()中做了默认配置 2. Log API ASP .NET Core 提供了一套Log API, 它可以各种各样的</description>
      </item>
      
      <item>
        <title>04_项目配置</title>
        <link>https://xtddw.github.io/code/dotnetcore/04%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/04%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</guid>
        <description>配置提供商 文件格式(INI, JSON, XML) 命令行参数 环境变量 内存中的.NET对象 未加密的Secret管理存储 加密的用户存储, 例如Azure秘钥库 自定义</description>
      </item>
      
      <item>
        <title>05_异常处理</title>
        <link>https://xtddw.github.io/code/dotnetcore/05%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/05%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
        <description>默认异常处理 1 app.UseDeveloperExceptionPage(); 自定义异常处理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static class ExceptionHandlingExtensions { public static void UseMyExceptionHandler(this IApplicationBuilder app,ILoggerFactory loggerFactory) { app.UseExceptionHandler(build =&amp;gt; { build.Run(async context =&amp;gt; { context.Response.StatusCode = StatusCodes.Status500InternalServerError; context.Response.ContentType = &amp;#34;application/json&amp;#34;; var ex = context.Features.Get&amp;lt;IExceptionHandlerFeature&amp;gt;(); if (ex != null)</description>
      </item>
      
      <item>
        <title>06_ResourceModel</title>
        <link>https://xtddw.github.io/code/dotnetcore/06resourcemodel/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/06resourcemodel/</guid>
        <description>API 不应直接返回Entity * Entity/Domain Model是内部实现细节 * 合约/接口界面 API应返回另外一个类（资源 Resource） 与Entity可能很像.</description>
      </item>
      
      <item>
        <title>07_模型验证</title>
        <link>https://xtddw.github.io/code/dotnetcore/07%E6%A8%A1%E5%9E%8B%E9%AA%8C%E8%AF%81/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/07%E6%A8%A1%E5%9E%8B%E9%AA%8C%E8%AF%81/</guid>
        <description>属性标签 https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-2.1 [CreditCard]：验证属性是否具有信用卡格式。 [Compare]：验证某个模型中的两个属性是否匹配。 [EmailAddre</description>
      </item>
      
      <item>
        <title>08_RESTful API</title>
        <link>https://xtddw.github.io/code/dotnetcore/08rest/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/08rest/</guid>
        <description>什么是REST REST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的. 一个实现了RES</description>
      </item>
      
      <item>
        <title>09_翻页过滤排序</title>
        <link>https://xtddw.github.io/code/dotnetcore/09%E7%BF%BB%E9%A1%B5%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/09%E7%BF%BB%E9%A1%B5%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F/</guid>
        <description>翻页 Query String http://localhost:5000/api/posts?pageIndex=1&amp;amp;pageSize=10&amp;amp;orderBy=id 使用抽象父类 QueryParameters, 包含常见参数: PageIndex PageSize OrderBy… 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41</description>
      </item>
      
      <item>
        <title>10_资源塑形</title>
        <link>https://xtddw.github.io/code/dotnetcore/10%E8%B5%84%E6%BA%90%E5%A1%91%E5%BD%A2/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/10%E8%B5%84%E6%BA%90%E5%A1%91%E5%BD%A2/</guid>
        <description>资源塑形 如果资源的属性较多, 而且API消费者只需要一分部属性, 那么就应该考虑资源塑形 集合资源 单个资源 异常处理 IEnumerableExtensions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
      </item>
      
      <item>
        <title>11_HATEOAS</title>
        <link>https://xtddw.github.io/code/dotnetcore/11hateoas/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/11hateoas/</guid>
        <description>Hypermedia as the Engine of Application State REST里最复杂的约束, 构建成熟REST API的核心 可进化性, 自我描述 超媒体(Hypermedia, 例如超链接)驱动如何消费和</description>
      </item>
      
      <item>
        <title>12_CURD</title>
        <link>https://xtddw.github.io/code/dotnetcore/12postputpatchdelete/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/12postputpatchdelete/</guid>
        <description>安全性&amp;amp;幂等性 安全性☞方法执行后并不会改变资源的表述 幂等性☞方法无论执行多少次都会得到同样的结果 POST 添加资源 不安全，不幂等 参数[Fro</description>
      </item>
      
      <item>
        <title>ex_IdentityServer4</title>
        <link>https://xtddw.github.io/code/dotnetcore/identityserver4/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/identityserver4/</guid>
        <description>准备 https://identityserver4.readthedocs.io/en/release/ OpenID Connect &amp;amp; OAuth 2.0 framework for ASP.NET Core 2. 建立Identity Provider项目 IdentityServer4.Templates https://github.com/IdentityServer/IdentityServer4.Templates 安装工具: dotnet new -i identityserver4.templates 重置 “dotnet new” 功能列表: dotnet new --debug:reinit 模板: dotnet new</description>
      </item>
      
      <item>
        <title>ex_OAuth2</title>
        <link>https://xtddw.github.io/code/dotnetcore/oauth2openidconnect/</link>
        <pubDate>Sun, 29 Dec 2019 13:36:17 +0800</pubDate>
        <author>xtddw7@gmail.com (byone)</author>
        <guid>https://xtddw.github.io/code/dotnetcore/oauth2openidconnect/</guid>
        <description>OAuth 2.0 vs OpenId Connect OAuth 2.0 OAuth 2.0是一个委托协议, 它可以让那些控制资源的人允许某个应用代表他们来访问他们控制的资源, 注意是代表这些人, 而不是假冒或模仿这</description>
      </item>
      

    
  </channel>
</rss>